package com.example.config;

import lombok.RequiredArgsConstructor;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.FlowBuilder;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.flow.Flow;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@EnableBatchProcessing
@RequiredArgsConstructor
public class ParallelStepJobConfig {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;

    // ‚úÖ Î≥ëÎ†¨ Step Ïã§ÌñâÏùÑ ÏúÑÌïú Job Íµ¨ÏÑ±
    @Bean
    public Job parallelStepJob() {
        return new JobBuilder("parallelStepJob", jobRepository)
                .start(splitFlow())              // Step1, Step2 Î≥ëÎ†¨ Ïã§Ìñâ
                .next(joinedStep())             // Î≥ëÎ†¨ Ïù¥ÌõÑ Step3 Ïã§Ìñâ
                .end()
                .build();
    }

    // ‚úÖ Î≥ëÎ†¨Î°ú Ïã§ÌñâÌï† Flow Íµ¨ÏÑ±
    @Bean
    public Flow splitFlow() {
        Flow flow1 = new FlowBuilder<Flow>("flow1")
                .start(step1())
                .build();

        Flow flow2 = new FlowBuilder<Flow>("flow2")
                .start(step2())
                .build();

        return new FlowBuilder<Flow>("splitFlow")
                .split(taskExecutor())
                .add(flow1, flow2)
                .build();
    }

    // ‚úÖ Î≥ëÎ†¨ Ï≤òÎ¶¨Ïö© TaskExecutor (Ïä§Î†àÎìú)
    @Bean
    public TaskExecutor taskExecutor() {
        return new SimpleAsyncTaskExecutor("parallel-thread-");
    }

    @Bean
    public Step step1() {
        return new StepBuilder("step1", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("üöÄ Step1 ÏãúÏûë: ÏÇ¨Ïö©Ïûê Ï≤òÎ¶¨");
                    Thread.sleep(2000); // ÏùºÎ∂ÄÎü¨ ÏßÄÏó∞
                    System.out.println("‚úÖ Step1 ÏôÑÎ£å");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    @Bean
    public Step step2() {
        return new StepBuilder("step2", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("üöÄ Step2 ÏãúÏûë: Ï£ºÎ¨∏ Ï≤òÎ¶¨");
                    Thread.sleep(1000); // ÏùºÎ∂ÄÎü¨ ÏßÄÏó∞
                    System.out.println("‚úÖ Step2 ÏôÑÎ£å");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    @Bean
    public Step joinedStep() {
        return new StepBuilder("step3", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("üì¶ Step3: Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }
}
