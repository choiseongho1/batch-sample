

package com.example.config;

import lombok.RequiredArgsConstructor;
import org.springframework.batch.core.*;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.flow.FlowExecutionStatus;
import org.springframework.batch.core.job.flow.JobExecutionDecider;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

import java.time.LocalDateTime;

@Configuration
@RequiredArgsConstructor
public class JobExecutionDeciderJobConfig {

    /*
    JobExecutionDecider Ïã§Ïäµ
    - ÌòÑÏû¨ ÏãúÍ∞ÑÏùò Ï¥à(second)Í∞Ä ÏßùÏàòÏù∏ÏßÄ ÌôÄÏàòÏù∏ÏßÄÏóê Îî∞Îùº Î∂ÑÍ∏∞ Ïã§Ìñâ
    - Step1 ‚Üí Decider ‚Üí ÏßùÏàòÎ©¥ stepEven, ÌôÄÏàòÎ©¥ stepOdd ‚Üí Í≥µÌÜµ stepFinal Ïã§Ìñâ
    */

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;

    // Ï†ÑÏ≤¥ Job Íµ¨ÏÑ±
    @Bean
    public Job jobExecutionDeciderJob() {
        return new JobBuilder("jobExecutionDeciderJob", jobRepository)
                .start(jobExecutionDeciderStep1())  // Step1 Ïã§Ìñâ ÌõÑ
                .next(evenOddDecider())             // Decider Î°úÏßÅ ÏàòÌñâ
                    .on("EVEN").to(stepEven())      // ÏßùÏàòÎ©¥ stepEven Ïã§Ìñâ
                .from(evenOddDecider())
                    .on("ODD").to(stepOdd())        // ÌôÄÏàòÎ©¥ stepOdd Ïã§Ìñâ
                .from(stepEven())
                    .on("*").to(stepFinal())         // Ïù¥ÌõÑ Í≥µÌÜµ Step Ïã§Ìñâ
                .from(stepOdd())
                    .on("*").to(stepFinal())
                .end()
                .build();
    }

    // Ï†ÑÏ≤òÎ¶¨ Step
    @Bean
    public Step jobExecutionDeciderStep1() {
        return new StepBuilder("jobExecutionDeciderStep1", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("üöÄ Step1: Ï†ÑÏ≤òÎ¶¨ Ïã§Ìñâ");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    // ÏßùÏàò Î∂ÑÍ∏∞ Step
    @Bean
    public Step stepEven() {
        return new StepBuilder("stepEven", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("ÏßùÏàò Î∂ÑÍ∏∞ Ïã§ÌñâÎê® (EVEN)");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    // ÌôÄÏàò Î∂ÑÍ∏∞ Step
    @Bean
    public Step stepOdd() {
        return new StepBuilder("stepOdd", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("ÌôÄÏàò Î∂ÑÍ∏∞ Ïã§ÌñâÎê® (ODD)");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    // ÎßàÏßÄÎßâ Í≥µÌÜµ Step
    @Bean
    public Step stepFinal() {
        return new StepBuilder("stepFinal", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("üèÅ ÎßàÏßÄÎßâ Step Ïã§Ìñâ (Í≥µÌÜµ)");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    // Decider: ÌòÑÏû¨ Ï¥àÍ∞Ä ÏßùÏàòÎ©¥ EVEN, ÌôÄÏàòÎ©¥ ODD Î∞òÌôò
    @Bean
    public JobExecutionDecider evenOddDecider() {
        return (jobExecution, stepExecution) -> {
            int second = LocalDateTime.now().getSecond();
            String result = (second % 2 == 0) ? "EVEN" : "ODD";
            System.out.println("‚è± ÌòÑÏû¨ Ï¥à: " + second + " ‚Üí Î∂ÑÍ∏∞ Í≤∞Í≥º: " + result);
            return new FlowExecutionStatus(result);
        };
    }
}